Make intake-api a Universal Email Webhook Adapter:
Transform this webhook receiver to handle any email service format (Mailgun, SendGrid, etc.) and normalize the data into a standard JSON format.
Current Problem: Different email services send webhook data with different field names, causing errors when we try to forward the data.
Solution: Create a smart mapper that tries multiple possible field names and always outputs a consistent format.
Implementation:

Replace the current /api/email-handler endpoint with this enhanced version:

javascript// Universal email data extractor
function extractEmailData(body) {
  // Try multiple possible field names for subject
  const subject = body.subject || body.Subject || body['Subject'] || '';
  
  // Try multiple possible field names for sender
  const from = body.sender || body.from || body.From || body['From'] || 
               body.sender_email || body.email || '';
  
  // Try multiple possible field names for recipient  
  const to = body.recipient || body.to || body.To || body['To'] || 
             body.recipient_email || body.delivered_to || '';
  
  // Try multiple possible field names for email body text
  const bodyText = body['body-plain'] || body['stripped-text'] || body.text || 
                   body.body || body.content || body.message || '';
  
  return {
    subject,
    from, 
    to,
    "body-plain": bodyText
  };
}

app.post('/api/email-handler', (req, res) => {
  console.log('=== Raw Webhook Received ===');
  console.log('Available fields:', Object.keys(req.body));
  console.log('Sample data:', JSON.stringify(req.body, null, 2));
  
  // Extract and normalize the email data
  const emailData = extractEmailData(req.body);
  
  console.log('=== Normalized Email Data ===');
  console.log(JSON.stringify(emailData, null, 2));
  
  // Always respond successfully to webhook
  res.status(200).json({ message: 'Webhook received successfully' });
  
  // Forward normalized data asynchronously
  setImmediate(async () => {
    try {
      // Only forward if we extracted meaningful data
      if (!emailData.subject && !emailData.from && !emailData["body-plain"]) {
        console.log('⚠️  No meaningful email data found to forward');
        return;
      }
      
      console.log('=== Forwarding Normalized Data ===');
      
      const response = await axios.post('https://job-pilot-theeenate.replit.app/api/job-intake', emailData, {
        headers: { 'Content-Type': 'application/json' },
        timeout: 10000
      });
      
      console.log('✅ Forward successful:', response.status);
      console.log('Response:', JSON.stringify(response.data, null, 2));
      
    } catch (error) {
      console.error('❌ Forward failed:', error.message);
      if (error.response) {
        console.error('Status:', error.response.status);
        console.error('Error details:', JSON.stringify(error.response.data, null, 2));
      }
    }
  });
});
This creates a universal adapter that can handle any email webhook format and always outputs clean, consistent data for downstream processing.
